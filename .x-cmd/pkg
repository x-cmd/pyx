
pkg(){
    local op="$1";  shift
    case "$op" in
        *)             "pkg_$op" "$@" ;;
    esac
}


pkg_ls()(
    cd $(x wsroot)/src
    find . -name '*.json'
)

pkg_json2yml()(
    cd $(x wsroot)/src
    find . -name '*.json' | while read -r line; do
        p=${line%.json}.yml
        cat $line | x yq -o yaml e -P >$p
        # x j2y "$line" "$p"
        rm "$line"
    done
)

pkg_yml2tgz()(
    cd  $(x wsroot) && x rmrf .tmp

    pkg_yml2json "$@"
    pkg_json2binmod
    pkg_ins
    cd $(x wsroot)/.tmp
    x 7za a all.7z *
    # x 7 all.7z *
    x rmrf ../dist/all.7z
    mkdir -p ../dist
    mv all.7z ../dist/all.7z
    cd  $(x wsroot) && x rmrf .tmp
)

pkg_yml2json()(
    local state="$1" # whether force
    local tgtprefix="$(x wsroot)/.tmp"
    mkdir -p "$tgtprefix"
    cd $(x wsroot)/src

    for dir in *; do
        (
            cd "$dir" || continue
            for pkg in *; do
                (
                    x:info "pkg: $(pwd)/$pkg"
                    cd "$pkg" || exit
                    if [ ! -f meta.yml ]; then
                        x:warn  "Not Existed: $dir/$pkg/meta.yml"
                        exit
                    fi

                    mkdir -p "$tgtprefix/$dir/$pkg"
                    x yq -o json e -P <meta.yml | x ja t "\t" >"$tgtprefix/$dir/$pkg/meta.tt.json"
                    # x y2j meta.yml | x ja t "\t" >"$tgtprefix/$dir/$pkg/meta.tt.json"

                    if [ -f version.sh ]; then
                        if [ -z "$state" ]; then
                            x rmrf tmp
                            (
                                . ./version.sh | x ja t "\t"
                            ) > tmp
                        fi
                        cat tmp >"$tgtprefix/$dir/$pkg/version.tt.json"
                    elif [ -f version.yml ]; then
                        x:info "Generate: $tgtprefix/$dir/$pkg/version.tt.json" >&2
                        x yq -o json e -P <version.yml | x ja t "\t" >"$tgtprefix/$dir/$pkg/version.tt.json"
                    else
                        x:error "Unexisted version.sh and version.yml: $tgtprefix/$dir/$pkg" >&2
                    fi

                    if [ -d .x-cmd ]; then
                        x:info "Copy .x-cmd to $tgtprefix/$dir/$pkg"
                        cp -r .x-cmd "$tgtprefix/$dir/$pkg"
                    fi
                )
            done
        )
    done

    # find . -name '*.yml' | while read -r line; do
    #     pp="$tgtprefix/$line"
    #     ppd="${pp%/*}"
    #     [ -d "$ppd" ] || mkdir -p "$ppd"
    #     {
    #         cat "$line" | x yq -o json e -P | x ja t "\t"
    #         printf "\n"
    #     } >"${pp%.yml}.tt.json"
    # done
)

pkg_install(){
    pkg_yml2json
    pkg_ins
}

pkg_ins(){
    x rmrf "$___X_CMD_ROOT_TMP/pkg/raw"
    mkdir -p "$___X_CMD_ROOT_TMP/pkg"
    x:info "Copy .x-cmd to $___X_CMD_ROOT_TMP/pkg/raw"
    cp -rf "$(x wsroot)/.tmp" "$___X_CMD_ROOT_TMP/pkg/raw"
}

pkg_json2binmod()(
    # step 1: list all json
    # step 2: get xbin attribute
    x:info "Generate binmod.txt file"
    cd "$(x wsroot)/.tmp" || return
    find . -name meta.tt.json | while read -r line; do
        # TODO: if it is a value.
        pkg_name="${line%/meta.tt.json}"
        pkg_name="${pkg_name##*/}"

        {
        x ja '
    _[1]~/xbin/{
        if(v() != "}"&& v() != "{"){print (k()=="xbin") ? "" : k()}
}
'
    } <"$line" | while read -r name; do
            printf ":%s:%s\n" "${${name%%*}:-$pkg_name}" ${pkg_name}
        done
    done > binmod.txt
)


[ "$#" -gt 0 ] && pkg "$@"

